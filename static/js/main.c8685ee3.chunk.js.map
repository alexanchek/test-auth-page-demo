{"version":3,"sources":["components/auth/PublicRoute.tsx","components/auth/PrivateRoute.tsx","types/Redux/authTypes.ts","store/actions/authActions.ts","components/Pages/SignIn/SignIn.tsx","services/firebase/config.ts","types/Redux/ContactsTypes.ts","store/actions/contactsActions.ts","components/ContactCards/unknown.jpg","components/ContactCards/ContactCard.tsx","components/ContactCards/ContactCards.tsx","components/AddContactForm/AddContactForm.tsx","components/ContactsAppBar/ContactsAppBar.tsx","components/Pages/Contacts/Contacts.tsx","App.tsx","store/reducers/authReducer.ts","store/reducers/contactsReducer.ts","store/index.ts","index.tsx"],"names":["PublicRoute","Component","component","rest","authenticated","useSelector","state","auth","render","props","to","PrivateRoute","SET_USER","SIGN_OUT","setError","msg","dispatch","type","payload","setLoading","value","a","theme","createTheme","SignIn","useState","email","setEmail","password","setPassword","useDispatch","error","useEffect","ThemeProvider","Container","maxWidth","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","Typography","variant","onSubmit","event","data","preventDefault","getAuth","signInWithEmailAndPassword","console","log","message","noValidate","mt","TextField","margin","required","fullWidth","id","label","name","autoComplete","autoFocus","onChange","e","currentTarget","Button","mb","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","GET_CONTACTS","ADD_CONTACT","getcontacts","getDocs","collection","contactsArray","finalArray","forEach","doc","push","ContactCard","contact","editMode","setEditMode","changedName","setChangedName","changedEmail","setChangedEmail","changedPhone","setChangedPhone","phone","img","uuid","BoxForImage","maxHeight","alt","src","Grid","item","xs","Card","height","CardContent","UnknownImage","gutterBottom","CardActions","size","onClick","fields","field","finalUpdate","contactsRef","updateDoc","updatecontact","deleteDoc","deletecontact","ContactCards","contacts","py","length","container","spacing","map","AddContactForm","setName","setPhone","contactRef","contactId","contactWithId","setDoc","reset","ContactsAppBar","flexGrow","AppBar","position","Toolbar","color","signOut","Contacts","App","loading","unsubscribe","onAuthStateChanged","user","CircularProgress","CssBaseline","Fragment","Login","exact","path","initialState","needVerification","success","authReducer","action","initialContactsState","initialContactState","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8685ee3.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Route, Redirect, RouteProps } from 'react-router-dom';\n\nimport { RootState } from '../../store';\n\ninterface Props extends RouteProps {\n  component: any;\n}\n\nconst PublicRoute: FC<Props> = ({ component: Component, ...rest }) => {\n  const { authenticated } = useSelector((state: RootState) => state.auth);\n\n  return(\n    <Route {...rest} render={props => !authenticated ? <Component {...props} /> : <Redirect to=\"/contacts\" />} />\n  );\n}\n\nexport default PublicRoute;","import React, { FC } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Route, Redirect, RouteProps } from 'react-router-dom';\n\nimport { RootState } from '../../store';\n\ninterface Props extends RouteProps {\n  component: any;\n}\n\nconst PrivateRoute: FC<Props> = ({ component: Component, ...rest }) => {\n  const { authenticated } = useSelector((state: RootState) => state.auth);\n\n  return(\n    <Route {...rest} render={props => authenticated ? <Component {...props} /> : <Redirect to=\"/login\" />} />\n  );\n}\n\nexport default PrivateRoute;","export const SET_USER = 'SET_USER';\nexport const SIGN_OUT = 'SIGN_OUT';\nexport const SET_LOADING = 'SET_LOADING';\nexport const SET_ERROR = 'SET_ERROR';\n\nexport interface User {\n    firstName: string;\n    lastName: string,\n    email: string;\n    id: string;\n    createdAt: any;\n}\n\nexport interface AuthState {\n    user: User | null;\n    authenticated: boolean;\n    loading: boolean;\n    error: string;\n    needVerification: boolean;\n    success: string;\n}\n\nexport interface SignUpData {\n    firstName: string;\n    lastName: string;\n    email: string;\n    password: string;\n}\n\nexport interface SignInData {\n    email: string;\n    password: string;\n}\n\n//Actions\ninterface SetUserAction {\n    type: typeof SET_USER;\n}\n\ninterface SetLoadingAction {\n    type: typeof SET_LOADING;\n    payload: boolean;\n}\n\ninterface SignOutAction {\n    type: typeof SIGN_OUT;\n}\n\ninterface SetErrorAction {\n    type: typeof SET_ERROR;\n    payload: string;\n}\n\nexport type AuthAction = SetUserAction \n| SetLoadingAction \n| SignOutAction \n| SetErrorAction;","import {ThunkAction} from 'redux-thunk';\nimport {AuthAction, SET_USER, SET_LOADING, SIGN_OUT, SET_ERROR, SignInData} from '../../types/Redux/authTypes';\nimport {RootState} from '../index';\nimport { getAuth, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\n\nimport 'firebase/compat/auth'\nimport 'firebase/compat/firestore'\n\n    export const signin = (data: SignInData): ThunkAction<void, RootState, null, AuthAction> => {\n        return async dispatch => {\n          try {\n            const auth = getAuth();\n            await signInWithEmailAndPassword(auth, data.email, data.password);\n            dispatch({\n              type:SET_USER\n          });\n          } catch (err: any) {\n            console.log(err);\n            dispatch(setError(err.message));\n          }\n        }\n      }\n\n      export const signout = (): ThunkAction<void, RootState, null, AuthAction> => {\n        return async dispatch => {\n          try {\n            const auth = getAuth();\n            await signOut(auth);\n            dispatch({\n              type: SIGN_OUT\n            });\n          } catch (err) {\n            console.log(err);\n            // dispatch(setLoading(false));\n          }\n        }\n      }\n\n      export const setError = (msg: string): ThunkAction<void, RootState, null, AuthAction> => {\n        return dispatch => {\n          dispatch({\n            type: SET_ERROR,\n            payload: msg\n          });\n        }\n      }\n\n     export const setLoading = (value: boolean): ThunkAction<void, RootState, null, AuthAction> => {\n       return async dispatch => {\n          dispatch({\n            type: SET_LOADING,\n            payload: value\n          });\n       }\n     }\n","import * as React from 'react';\nimport { useState, useEffect } from 'react';\n\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nimport { signin, setError } from '../../../store/actions/authActions';\nimport { RootState } from '../../../store';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { User } from '../../../store/types/authTypes';\n\nconst theme = createTheme();\n\nconst SignIn = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n  const { error } = useSelector((state: RootState) => state.auth);\n\n  useEffect(() => {\n    return () => {\n      if(error) {\n        dispatch(setError(''));\n      }\n    }\n  }, [error, dispatch]);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if(error) {\n      dispatch(setError(''));\n    }\n    dispatch(signin({ email, password }));\n    \n  };\n\n  \n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              onChange={(e) => setEmail(e.currentTarget.value)}\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              onChange={(e) => setPassword(e.currentTarget.value)}\n            />\n            \n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Sign In\n            </Button>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default SignIn;","import { initializeApp } from 'firebase/app';\nimport { getFirestore } from 'firebase/firestore';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC1dws6l1Sh_jKnBd4MCtyJIlalYuxG_PQ\",\n    authDomain: \"auth-test-page-21d53.firebaseapp.com\",\n    projectId: \"auth-test-page-21d53\",\n    storageBucket: \"auth-test-page-21d53.appspot.com\",\n    messagingSenderId: \"630546616713\",\n    appId: \"1:630546616713:web:aeb566f09b845e64c0d158\"\n};\n\n\nexport const app = initializeApp(firebaseConfig);\nexport const db = getFirestore(app);\n\n","export const GET_CONTACTS= \"GET_CONTACTS\";\nexport const ADD_CONTACT = \"ADD_CONTACT\";\nexport const DELETE_CONTACT = \"DELETE_CONTACT\";\n\nexport interface Contact {\n    uuid: string;\n    name: string;\n    email: string;\n    phone: string;\n    img: string;\n}\n\nexport interface ContactState {\n    contact: Contact | null;\n}\n\nexport interface ContactsState {\n    data: Contact[] | null;\n}\n\n// Actions\ninterface GetContactsAction {\n    type: typeof GET_CONTACTS;\n    payload: Contact[]\n}\n\ninterface AddContactAction {\n    type: typeof ADD_CONTACT;\n    payload: Contact;\n}\n\ninterface DeleteContactAction {\n    type: typeof DELETE_CONTACT;\n}\n\nexport type ContactsAction = GetContactsAction\n| AddContactAction\n| DeleteContactAction;","import { collection, updateDoc, setDoc, deleteDoc, doc, getDocs } from \"firebase/firestore\"; \nimport { ThunkAction } from \"redux-thunk\";\nimport { RootState } from \"..\";\nimport { db } from \"../../services/firebase/config\";\nimport { Contact, ContactsAction, GET_CONTACTS } from \"../../types/Redux/ContactsTypes\";\n\n\nexport const addcontact = (contact: Contact): ThunkAction<void, RootState, null, ContactsAction> => {\n    return async dispatch => {\n        try {\n            const contactRef = await doc(collection(db, \"contacts\"));\n            const contactId = contactRef.id;\n            const contactWithId = {...contact, uuid: contactId};\n            await setDoc(contactRef, contactWithId);\n            dispatch(getcontacts());\n        } catch (e: any) {\n            console.log(e.message);\n        }\n    }\n}\n\nexport const getcontacts = (): ThunkAction<void, RootState, null, ContactsAction> => {\n    return async dispatch => {\n        try {\n            const contactsArray = await getDocs(collection(db, \"contacts\"));\n            const finalArray: any = []\n            contactsArray.forEach((doc) => {\n                finalArray.push(doc.data());\n              });\n            dispatch({\n                type: GET_CONTACTS,\n                payload: finalArray\n            })\n        } catch (e: any) {\n            console.log(e.message);\n        }\n    }\n}\n\nexport const deletecontact = (uuid: string): ThunkAction<void, RootState, null, ContactsAction> => {\n    return async dispatch => {\n        try {\n            await deleteDoc(doc(db, \"contacts\", uuid));\n            dispatch(getcontacts());\n        } catch (e: any) {\n            console.log(e.message);\n        }\n    }\n}\n\nexport const updatecontact = (uuid: string, fields: any): ThunkAction<void, RootState, null, ContactsAction> => {\n    return async dispatch => {\n        try {\n            let finalUpdate: any = {};\n            for (let field in fields) {\n    \n                if (fields[field]) {\n                    if (field === 'changedName') {\n                        finalUpdate.name = fields[field];\n                    }\n                    if (field === 'changedEmail') {\n                        finalUpdate.email = fields[field];\n                    }\n                    if (field === 'changedPhone') {\n                        finalUpdate.phone = fields[field];\n                    }\n                }\n            }\n            const contactsRef = doc(db, \"contacts\", uuid);\n            await updateDoc(contactsRef, finalUpdate);\n            dispatch(getcontacts());\n        } catch (e: any) {\n            console.log(e.message);\n        }\n    }\n}","export default __webpack_public_path__ + \"static/media/unknown.568063de.jpg\";","import * as React from 'react';\nimport {useState} from 'react';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport { Box } from '@mui/system';\nimport { CardActions, Button, TextField } from '@mui/material';\nimport { Contact } from '../../types/Redux/ContactsTypes';\n\nimport UnknownImage from './unknown.jpg';\n\nimport { useDispatch } from 'react-redux';\nimport { deletecontact, updatecontact } from '../../store/actions/contactsActions'\n\ninterface ContactCardProps {\n    contact: Contact\n}\n\nconst ContactCard: React.FC<ContactCardProps> = ({contact}) => {\n    const [editMode, setEditMode] = useState(false);\n    const [changedName, setChangedName] = useState('');\n    const [changedEmail, setChangedEmail] = useState('');\n    const [changedPhone, setChangedPhone] = useState('');\n\n    const {name, email, phone, img, uuid} = contact;\n    const dispatch = useDispatch();\n\n    const handleDeleteClick = () => {\n        dispatch(deletecontact(uuid));\n    }\n\n    const handleEditClick = () => {\n        setEditMode(!editMode);\n    }\n\n    const handleSaveClick = () => {\n        setEditMode(!editMode);\n        dispatch(updatecontact(uuid, {changedName, changedEmail, changedPhone}));\n        setChangedName('');\n        setChangedEmail('');\n        setChangedPhone('');\n    }\n\n    const BoxForImage = (img: string) => {\n        return (\n            <Box\n            component=\"img\"\n            sx={{\n                maxHeight: '250px',\n                maxWidth: '250px'\n            }}\n            alt={`${name}`}\n            src={img}\n          />\n        )\n    }\n\n  return (\n      <Grid item xs={6}>\n        <Card\n        sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n            <CardContent sx={{}}>\n                {img ? BoxForImage(img): BoxForImage(UnknownImage)};\n                \n                {editMode \n                ? <TextField\n                    name=\"name\"\n                    fullWidth\n                    id=\"firstName\"\n                    label=\"Введите имя\"\n                    autoFocus\n                    variant={\"standard\"}\n                    onChange={(e) => setChangedName(e.currentTarget.value)}\n                    />\n                :<Typography gutterBottom variant=\"h5\" component=\"h2\">\n                {name}\n                </Typography> }\n                \n                {editMode \n                ? <TextField\n                fullWidth\n                id=\"lastName\"\n                label=\"Введите e-mail\"\n                name=\"surname\"\n                variant={\"standard\"}\n                onChange={(e) => setChangedEmail(e.currentTarget.value)}\n                />\n                : \n                <Typography>\n                    E-Mail: {email}\n                </Typography>}\n\n\n                {editMode\n                ? <TextField\n                fullWidth\n                id=\"email\"\n                label=\"Введите номер\"\n                name=\"email\"\n                variant={\"standard\"}\n                onChange={(e) => setChangedPhone(e.currentTarget.value)}\n                />\n                : <Typography>\n                Phone: {phone}\n            </Typography>}\n            </CardContent>\n\n            <CardActions>\n                {editMode ? <Button size=\"small\" onClick={handleSaveClick}>Save</Button> : <Button size=\"small\" onClick={handleEditClick}>Edit</Button>}\n                <Button size=\"small\" onClick={handleDeleteClick}>Delete</Button>\n            </CardActions>\n        </Card>\n      </Grid>\n  );\n}\n\nexport default ContactCard;","import { Container, Grid, Typography } from '@mui/material';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getcontacts } from '../../store/actions/contactsActions';\nimport ContactCard from './ContactCard';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store';\n\nconst ContactCards = () => {\n    const dispatch = useDispatch();\n    const {data} = useSelector((state: RootState) => state.contacts) \n\n\n    useEffect(() => {\n        dispatch(getcontacts())\n    }, [dispatch])\n\n    return (\n        <Container sx={{ py: 8 }} maxWidth=\"md\">\n            <Grid>\n                <Typography>\n                    Контактов найдено: {data?.length}\n                </Typography>\n                <Grid container spacing={2}>\n                    {data?.map((contact) => {\n                        return (\n                            <ContactCard contact={contact} key={contact.uuid}/>\n                        )\n                    })}\n                </Grid>\n            </Grid>\n        </Container>\n    );\n};\n\nexport default ContactCards;","import { Box, Grid, TextField, Button } from '@mui/material';\nimport React, { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { addcontact } from '../../store/actions/contactsActions';\n\nconst AddContactForm = () => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [phone, setPhone] = useState('');\n\n    const dispatch = useDispatch();\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const uuid = '';\n        const img = '';\n        dispatch(addcontact({uuid, name, email, phone, img}));\n        e.currentTarget.reset();\n    }\n\n    return (\n            <Box component=\"form\" \n            onSubmit={handleSubmit} \n            noValidate sx={{ mt: 3 }}>\n                <Grid container spacing={2}>\n                <Grid item xs={6}>\n                    <TextField\n                    name=\"name\"\n                    required\n                    fullWidth\n                    id=\"fname\"\n                    label=\"Введите имя и фамилию\"\n                    autoFocus\n                    onChange={(e) => setName(e.currentTarget.value)}\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <TextField\n                    required\n                    fullWidth\n                    id=\"email\"\n                    label=\"Введите e-mail\"\n                    name=\"email\"\n                    onChange={(e) => setEmail(e.currentTarget.value)}\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <TextField\n                    required\n                    fullWidth\n                    id=\"phone\"\n                    label=\"Введите номер телефона\"\n                    name=\"phone\"\n                    onChange={(e) => setPhone(e.currentTarget.value)}\n                    />\n                </Grid>\n                </Grid>\n\n                <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    sx={{ mt: 3, mb: 2 }\n                    }\n                >\n                    Добавить\n                </Button>\n            </Box>\n    );\n};\n\nexport default AddContactForm;","import { Box, AppBar, Toolbar, Typography, Button } from '@mui/material';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { signout } from '../../store/actions/authActions';\n\nconst ContactsAppBar = () => {\n    const dispatch = useDispatch();\n\n    const signOutHandler = () => {\n        dispatch(signout());\n      }\n    \n    return (\n        <div>\n            <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            Personal notebook 📔 / All you need is Contacts ✏\n          </Typography>\n\n         <Button color=\"inherit\" onClick={signOutHandler}>Выйти</Button>\n        </Toolbar>\n      </AppBar>\n    </Box>\n        </div>\n    );\n};\n\nexport default ContactsAppBar;","import React from 'react';\nimport ContactCards from '../../ContactCards/ContactCards';\nimport AddContactForm from '../../AddContactForm/AddContactForm';\nimport ContactsAppBar from '../../ContactsAppBar/ContactsAppBar';\n\nconst Contacts = () => {\n    return (\n        <div>\n            <ContactsAppBar/>\n            <AddContactForm />\n            <ContactCards />\n        </div>\n    );\n};\n\nexport default Contacts;","// react\nimport React, {useEffect} from 'react';\nimport { HashRouter as Router, Switch } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux';\n\n// components for handling public/private routes\nimport PublicRoute from './components/auth/PublicRoute';\nimport PrivateRoute from './components/auth/PrivateRoute';\n\n// components of the app\nimport Login from './components/Pages/SignIn/SignIn';\nimport Contacts from './components/Pages/Contacts/Contacts';\n\n// styles from material ui\nimport { Box, CircularProgress, Container } from '@mui/material';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nimport { RootState } from './store';\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { setLoading } from './store/actions/authActions';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const { loading } = useSelector((state: RootState) => state.auth);\n  \n  // Check if user exists\n  useEffect(() => {\n    dispatch(setLoading(true));\n    const auth = getAuth();\n    const unsubscribe = onAuthStateChanged(auth, async (user: any) => {\n      if(user) {\n        dispatch(setLoading(true));\n      }\n\n    dispatch(setLoading(false));\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [dispatch]);\n\n  if (loading) {\n    return (\n      <CircularProgress color=\"secondary\" />\n    )\n  }\n\n  return (\n    <>\n      <Router>\n        <CssBaseline />\n\n        <Switch>\n          <React.Fragment>\n            <Container>\n              <Box\n                  sx={{\n                  marginTop: 1,\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',}}>\n                  <PublicRoute component={Login} exact path=\"/login\"/>\n\n                  <PrivateRoute component={Contacts} exact path=\"/\"/>\n                  <PrivateRoute component={Contacts} exact path=\"/contacts\"/>\n              </Box>\n            </Container>\n          </React.Fragment>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;","\nimport { AuthAction, AuthState, SET_USER, SIGN_OUT } from '../../types/Redux/authTypes';\n\nconst initialState: AuthState = {\n    user: null,\n    authenticated: false,\n    loading: false,\n    error: '',\n    needVerification: false,\n    success: ''\n}\n\nconst authReducer = (state=initialState, action: AuthAction): AuthState => {\n    switch(action.type) {\n        case SIGN_OUT:\n            return {\n                ...state,\n                user: null,\n                authenticated: false,\n                loading: false\n            }\n        case SET_USER:\n            return {\n                ...state,\n                authenticated: true\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport default authReducer;","import { ADD_CONTACT, ContactsAction, ContactsState, ContactState, GET_CONTACTS } from \"../../types/Redux/ContactsTypes\";\n\nconst initialContactsState: ContactsState = {\n    data: null\n}\n\nconst initialContactState: ContactState = {\n    contact: null\n}\n\nexport const ContactReducer = (state = initialContactState, action: ContactsAction): ContactState => {\n    switch(action.type) {\n        case ADD_CONTACT:\n            return {\n                contact: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const ContactsReducer = (state = initialContactsState, action: ContactsAction): ContactsState => {\n    switch(action.type) {\n        case GET_CONTACTS:\n            return {\n                data: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\n","import {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport authReducer from './reducers/authReducer';\nimport { ContactReducer, ContactsReducer } from './reducers/contactsReducer';\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    contacts: ContactsReducer,\n    contact: ContactReducer\n})\n\nconst store = createStore(\n    rootReducer, \n    composeWithDevTools(applyMiddleware(thunk))\n)\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport './services/firebase/config';\nimport store from './store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}